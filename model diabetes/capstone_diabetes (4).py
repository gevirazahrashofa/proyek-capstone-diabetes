# -*- coding: utf-8 -*-
"""Capstone Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JM1J7wYOjhqjqYE1lIRkDbtzuaf_sarq

IMPORT LIBRARY
"""

!pip install tf2onnx
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, confusion_matrix
import tf2onnx

df = pd.read_csv('diabetes.csv')

df.info()

df.isnull().sum()

df.describe()

df.shape

"""DATA PREPROCESSING"""

# Encode fitur categorical
categorical_cols = ['gender', 'smoking_history']

# Encode setiap kolom categorical ke angka
encoders = {}
for column in categorical_cols:
    label_encoder = LabelEncoder()
    df[column] = label_encoder.fit_transform(df[column])
    encoders[column] = label_encoder

# Encode label/target
label_encoder = LabelEncoder()
print(df.columns) # Examine this output to find the correct column name
# Replace 'Obesitas' with the actual column name from the print output
df['diabetes'] = label_encoder.fit_transform(df['diabetes'])

# Normalisasi fitur numeric
numerical_cols = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']

scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

# Memisahkan fitur dan label
X = df.drop('diabetes', axis=1)
y = df['diabetes']

df.head()

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Cek jumlah kelas output
num_classes = len(np.unique(y))
print("Jumlah kelas output:", num_classes)

"""NEURAL NETWORK MODEL"""

# Buat model neural network
model = Sequential([
    Dense(64, input_dim=X.shape[1], activation='relu'),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')  # Gunakan sigmoid untuk binary classification
])

# Compile model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Latih model
early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history = model.fit(X_train, y_train,
                    epochs=50,
                    batch_size=32,
                    validation_split=0.2,
                    callbacks=[early_stop],
                    verbose=1)

"""MODEL EVALUATION"""

# Evaluasi model
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Loss: {loss:.4f}")
print(f"Akurasi: {accuracy:.4f}")

# Prediksi dan evaluasi tambahan
y_pred = (model.predict(X_test) > 0.5).astype("int32")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Buat confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Tampilkan confusion matrix dalam bentuk gambar
plt.figure(figsize=(6, 5))
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_encoder.classes_)
disp.plot(cmap='Blues', values_format='d')
plt.title('Confusion Matrix')
plt.show()

# Plot akurasi
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Akurasi Model Selama Training')
plt.xlabel('Epoch')
plt.ylabel('Akurasi')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Model Selama Training')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

"""SAVE MODEL AND SCALER"""

# Save the model
model.save('diabetes_prediction_model.h5')
print("Model saved as 'diabetes_prediction_model.h5'")

# Save the scaler
import joblib
joblib.dump(scaler, 'diabetes_scaler.pkl')
print("Scaler saved as 'diabetes_scaler.pkl'")

"""inference"""

new_data_raw = pd.DataFrame([{
    'gender': 'Female',
    'age': 45,
    'hypertension': 0,
    'heart_disease': 0,
    'smoking_history': 'never',
    'bmi': 28.5,
    'HbA1c_level': 6.2,
    'blood_glucose_level': 145
}])

# Encode fitur kategori dengan encoder yang sama
for column in ['gender', 'smoking_history']:
    new_data_raw[column] = encoders[column].transform(new_data_raw[column])

# Normalisasi fitur numerik
new_data_scaled = new_data_raw.copy()
new_data_scaled[numerical_cols] = scaler.transform(new_data_scaled[numerical_cols])

# Prediksi
prediction_prob = model.predict(new_data_scaled)[0][0]
prediction_label = (prediction_prob > 0.5).astype(int)

# Decode label prediksi
predicted_class = label_encoder.inverse_transform([prediction_label])[0]

print(f"Probabilitas terkena diabetes: {prediction_prob:.4f}")
print(f"Hasil prediksi: {predicted_class}")

"""hasil akurat: tidak diabetes

konversi model ke onnx
"""

# Konversi model ke format ONNX
# Wrap the Sequential model in a functional Model
inputs = tf.keras.Input(shape=(X.shape[1],), name="input")
outputs = model(inputs)
functional_model = tf.keras.Model(inputs=inputs, outputs=outputs)

spec = (tf.TensorSpec((None, X.shape[1]), tf.float32, name="input"),)

onnx_model, _ = tf2onnx.convert.from_keras(functional_model, # Use the functional_model
                                           input_signature=spec,
                                           opset=13,
                                           output_path="diabetes_model.onnx")

print("Model berhasil dikonversi ke ONNX dan disimpan sebagai diabetes_model.onnx")